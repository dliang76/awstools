import os
from datetime import datetime, timedelta
from .helper import get_SAML_response, get_authorized_roles, get_profile_config, open_aws_console
from .helper import get_role_credentials, write_aws_config, write_temp_credentials, set_aws_profile


def role_match(role, auth_roles):
    for r in auth_roles:
        if role == r['role_arn'] or role == os.path.basename(r['role_arn']):
            return r

    return None

def saml_login(username = None,
                passcode = None,
                profile = 'default',
                duration_h = 8,
                force_renew = False,
                aws_region = 'us-east-1'):

    # get config from profile (if any)
    profile_setting = get_profile_config(profile)
    role = profile_setting.get('role')
    if profile_setting.get('region'):
        aws_region = profile_setting.get('region')

    if not force_renew:
        # check credential expiration time
        # if the credential is still valid for more than 1 hour, do nothing
        cred_expiration = profile_setting.get('credential_expiration')
        if cred_expiration:
            cred_expiration = datetime.strptime(cred_expiration, '%Y-%m-%d %H:%M:%S')
            if (cred_expiration -  datetime.now()).total_seconds() > 3600:
                # set aws profile for python (through env var) and boto3
                set_aws_profile(profile = profile)
                return

    # saml authentication
    saml_response = get_SAML_response(username = username, passcode = passcode)

    # get authorized roles
    auth_roles = get_authorized_roles(saml_response)

    # check to see if role in the profile is one of the authorized roles
    if role:
        auth_role = role_match(role = role, auth_roles = auth_roles)

        if not auth_role:
            print(f"{role} is not one of the authorized roles!")
            role = None

    # choose a role
    if not role:
        print("Please choose a role:")
        for idx, i in enumerate(auth_roles):
            print(f"  {idx}: {i['role_arn']}")
        # print ("\nRoleSelection: ", end =" ")
        role_index = input('\n  Choice:')
        auth_role = auth_roles[int(role_index)]
        print(f"\nAssuming role {auth_role['role_arn']} ...")

    # obtain temp AWS credentials
    expire_time = (datetime.now() + timedelta(hours = duration_h)).strftime('%Y-%m-%d %H:%M:%S')
    aws_credentials = get_role_credentials(role_arn = auth_role['role_arn'],
                                           principal_arn = auth_role['principal_arn'],
                                           saml_response = saml_response,
                                           duration_h = duration_h,
                                           aws_region = aws_region)

    # write config to file
    write_aws_config(profile = profile,
                     iam_role = auth_role['role_arn'],
                     aws_region = aws_region,
                     credential_expiration = expire_time)

    # write temp aws credential to file
    write_temp_credentials(profile = profile,
                           aws_access_key_id = aws_credentials["AccessKeyId"],
                           aws_secret_access_key = aws_credentials["SecretAccessKey"],
                           aws_session_token = aws_credentials["SessionToken"])

    # set aws profile for python (through env var) and boto3
    set_aws_profile(profile = profile)


def aws_console_login(username = None,
                      passcode = None,
                      duration_h = 8,
                      aws_region = 'us-east-1',
                      browser: str = None):
    ''' Function to login into aws console with the specified session duration (max 8hr at Hilton);
        Borrowed some ideas/code from https://gist.github.com/ottokruse/1c0f79d51cdaf82a3885f9b532df1ce5
        for signing into AWS web console using aws credentials.

        Author(s): dliang1122@gmail.com

        Args
        -------------------
        username (str): used id (e.g. Hilton OnQ ID)
        passcode (int): passcode generated by RSA
        duation_h (int or float): session duration in hours. Default: 8, Currently, Max = 8 (8 hours) and Min = 0.25 (15 mins)
        aws_region (str): aws region. Default: 'us-east-1'
        brower (str): browser to open the AWS console. E.g. 'safari', 'chrome' or path to browser application
    '''

    # saml authentication
    saml_response = get_SAML_response(username = username, passcode = passcode)

    # get authorized roles
    auth_roles = get_authorized_roles(saml_response)

    # choose a role
    print("Please choose a role:")
    for idx, i in enumerate(auth_roles):
        print(f"  {idx}: {i['role_arn']}")

    role_index = input('\n  Choice:')
    auth_role = auth_roles[int(role_index)]
    print(f"\nAssuming role {auth_role['role_arn']} ...")

    # obtain temp AWS credentials
    expire_time = (datetime.now() + timedelta(hours = duration_h)).strftime('%Y-%m-%d %H:%M:%S')
    print(f'The session will expire around {expire_time}.')

    aws_credentials = get_role_credentials(role_arn = auth_role['role_arn'],
                                           principal_arn = auth_role['principal_arn'],
                                           saml_response = saml_response,
                                           duration_h = duration_h,
                                           aws_region = aws_region)

    # write config to file
    write_aws_config(profile = 'default',
                     iam_role = auth_role['role_arn'],
                     aws_region = aws_region,
                     credential_expiration = expire_time)

    # write temp aws credential to file
    write_temp_credentials(profile = 'default',
                           aws_access_key_id = aws_credentials["AccessKeyId"],
                           aws_secret_access_key = aws_credentials["SecretAccessKey"],
                           aws_session_token = aws_credentials["SessionToken"])

    # set aws profile for python (through env var) and boto3
    set_aws_profile(profile = 'default')



    # open aws console using temp aws credentials
    open_aws_console(aws_access_key_id = aws_credentials["AccessKeyId"],
                     aws_secret_access_key = aws_credentials["SecretAccessKey"],
                     aws_session_token = aws_credentials["SessionToken"],
                     browser = browser)

